{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/Projetos/Projeto Jam-Stack/Project-portifolio/pages/sobre/[repos].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PagesGit from '../../src/components/GitPages';\nimport websitePageHOC from '../../src/components/Hoc';\n\nfunction GitPages(_ref) {\n  var post = _ref.post;\n  return (// eslint-disable-next-line react/jsx-filename-extension\n    __jsx(PagesGit, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }\n    })\n  );\n}\n\n_c = GitPages;\nGitPages.propTypes = PagesGit.propTypes;\nexport var __N_SSG = true;\nexport default _c2 = websitePageHOC(GitPages); // export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\n//     'https://api.github.com/users/marcosHenrique-developer/repos',\n//   );\n//   const posts = await res.json();\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map((post) => ({\n//     params: { id: post.id },\n//   }));\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n// // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(\n//     `https://api.github.com/users/marcosHenrique-developer/repos/${params.id}`,\n//   );\n//   const post = await res.json();\n//   // Pass post data to the page via props\n//   return { props: { post } };\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GitPages\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/apple/Downloads/Projetos/Projeto Jam-Stack/Project-portifolio/pages/sobre/[repos].js"],"names":["React","PagesGit","websitePageHOC","GitPages","post","propTypes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,SAASC,QAAT,OAA4B;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC1B,SACE;AACA,UAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAID;;KALQD,Q;AAOTA,QAAQ,CAACE,SAAT,GAAqBJ,QAAQ,CAACI,SAA9B;;AAEA,qBAAeH,cAAc,CAACC,QAAD,CAA7B,C,CAsCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\nimport PagesGit from '../../src/components/GitPages';\nimport websitePageHOC from '../../src/components/Hoc';\n\nfunction GitPages({ post }) {\n  return (\n    // eslint-disable-next-line react/jsx-filename-extension\n    <PagesGit post={post} />\n  );\n}\n\nGitPages.propTypes = PagesGit.propTypes;\n\nexport default websitePageHOC(GitPages);\n\nexport async function getStaticProps() {\n  const gitRepo = await fetch(\n    'https://api.github.com/users/marcosHenrique-developer/repos',\n  ).then(async (res) => {\n    const response = await res.json();\n    return response;\n  });\n  return {\n    props: {\n      gitRepo,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const pageCategories = await fetch(\n    'https://api.github.com/users/marcosHenrique-developer/repos',\n  ).then(async (respostaDoServer) => {\n    const resposta = await respostaDoServer.json();\n    return resposta;\n  });\n\n  const paths = pageCategories.reduce((valorAcumulado, pageCategory) => {\n    const pagesPaths = pageCategory.map((page) => {\n      const gitRepo = page.html_url;\n      return { params: { slug: gitRepo } };\n    });\n\n    return [...valorAcumulado, ...pagesPaths];\n  }, []);\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\n//     'https://api.github.com/users/marcosHenrique-developer/repos',\n//   );\n//   const posts = await res.json();\n\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map((post) => ({\n//     params: { id: post.id },\n//   }));\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\n// // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(\n//     `https://api.github.com/users/marcosHenrique-developer/repos/${params.id}`,\n//   );\n//   const post = await res.json();\n\n//   // Pass post data to the page via props\n//   return { props: { post } };\n// }\n"]},"metadata":{},"sourceType":"module"}
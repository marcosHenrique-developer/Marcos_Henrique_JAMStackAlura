{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-confusing-arrow */\n\n/* eslint-disable implicit-arrow-linebreak */\n\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport NextLink from 'next/link';\nimport styled from 'styled-components';\nimport get from 'lodash/get';\nconst StyledLink = styled.a`\n  color: inherit;\n  ${({\n  theme,\n  color\n}) => color ? `color: ${get(theme, `colors.${color}.color`)}` : 'color: inherit;'};\n  text-decoration: none;\n  opacity: 1;\n  transition: opacity ${({\n  theme\n}) => theme.transition};\n  &:hover,\n  &:focus {\n    opacity: 0.5;\n  }\n`; // eslint-disable-next-line import/prefer-default-export\n\nexport const Links = (_ref) => {\n  let {\n    children,\n    href\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"href\"]);\n\n  return __jsx(NextLink, {\n    href: href,\n    passHref: true\n  }, __jsx(StyledLink, props, children));\n};","map":null,"metadata":{},"sourceType":"module"}
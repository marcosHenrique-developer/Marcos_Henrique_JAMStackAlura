{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-console */\n\n/* eslint-disable operator-linebreak */\n\n/* eslint-disable indent */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { breakpointsMedia } from '../../../theme/utils/breakpointMedia';\nimport Text from '../../../foundation';\nimport Button from '../../Button';\nimport TextField from '../../Input';\nimport Result from './Result';\nimport Box from '../../../foundation/Box';\nconst FormMessageWrapper = styled.section`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  padding: 0.2rem 0.5rem;\n`;\nFormMessageWrapper.Title = styled.div`\n  width: 92%;\n  height: 25%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\nFormMessageWrapper.Content = styled.div`\n  /* width: 90%; */\n  & form {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n  }\n  & form button {\n    align-self: flex-end;\n    ${breakpointsMedia({\n  xs: css`\n        margin-right: auto;\n      `,\n  md: css`\n        margin-right: auto;\n      `\n})}\n  }\n`;\nconst formStates = {\n  DEFAULT: 'DEFAULT',\n  LOADING: 'LOADING',\n  DONE: 'DONE',\n  ERROR: 'ERROR'\n};\n\nconst FormContent = () => {\n  const [isFormSubmited, setIsFormSubmited] = React.useState(false);\n  const [submissionStatus, setSubmissionStatus] = React.useState(formStates.DEFAULT);\n  const [userInfo, setUserInfo] = React.useState({\n    email: '',\n    nome: ''\n  }); // eslint-disable-next-line operator-linebreak\n\n  const isFormInvalid = userInfo.email.length === 0 || userInfo.nome.lenght === 0;\n\n  async function resetValues() {\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    setIsFormSubmited(false);\n    setSubmissionStatus(formStates.DEFAULT);\n    setUserInfo({\n      email: '',\n      nome: ''\n    });\n  }\n\n  function handleChange(ev) {\n    const fieldName = ev.target.getAttribute('name');\n    setUserInfo(_objectSpread(_objectSpread({}, userInfo), {}, {\n      [fieldName]: ev.target.value\n    }));\n  }\n\n  return (// eslint-disable-next-line react/jsx-filename-extension\n    __jsx(FormMessageWrapper.Content, null, __jsx(FormMessageWrapper.Title, null, __jsx(Text, {\n      tag: \"h1\",\n      mobile: \"subTitleXS\",\n      desktop: \"subTitleMD\"\n    }, !isFormSubmited && 'Please type a valid message', isFormSubmited && submissionStatus === formStates.LOADING && 'Loading ...', isFormSubmited && submissionStatus === formStates.ERROR && 'Try again :(', isFormSubmited && submissionStatus === formStates.DONE && 'Congratulations :)')), __jsx(\"form\", {\n      onSubmit: ev => {\n        ev.preventDefault();\n        setIsFormSubmited(true);\n        setSubmissionStatus(formStates.LOADING);\n        const userDTO = {\n          username: userInfo.email,\n          name: userInfo.nome\n        };\n        setTimeout(() => {\n          fetch('https://instalura-api.vercel.app/api/users', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userDTO)\n          }).then(respostaDoServidor => {\n            if (respostaDoServidor.ok) {\n              return respostaDoServidor.json();\n            }\n\n            throw new Error('Não foi possível cadastrar o usuário agora :(');\n          }).then(respostaConvertidaEmObjeto => {\n            setSubmissionStatus(formStates.DONE);\n            resetValues();\n            console.log(respostaConvertidaEmObjeto);\n          }).catch(error => {\n            setSubmissionStatus(formStates.ERROR);\n            resetValues();\n            console.error(error);\n          });\n        }, 500);\n      }\n    }, __jsx(Text, {\n      variant: \"title\",\n      tag: \"h1\",\n      color: \"tertiary.main\"\n    }, \"Entre em contato conosco\"), __jsx(\"div\", null, __jsx(TextField, {\n      placeholder: \"Nome\",\n      name: \"nome\",\n      value: userInfo.nome,\n      onChange: handleChange\n    })), __jsx(\"div\", null, __jsx(TextField, {\n      placeholder: \"Email\",\n      name: \"email\",\n      value: userInfo.email,\n      onChange: handleChange\n    })), __jsx(\"div\", {\n      style: {\n        display: 'center',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }\n    }, __jsx(Button, {\n      variant: \"primary.main\",\n      type: \"submit\",\n      disabled: isFormInvalid,\n      fullWidth: true,\n      margin: \"0\"\n    }, \"Enviar\")), __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }, __jsx(Box, {\n      width: {\n        xs: '80px',\n        md: '150px'\n      },\n      height: {\n        xs: '80px',\n        md: '150px'\n      },\n      marginBottom: {\n        xs: '2rem',\n        md: '0'\n      }\n    }, isFormSubmited && submissionStatus === formStates.LOADING && __jsx(Result, {\n      animation: formStates.LOADING\n    }), isFormSubmited && submissionStatus === formStates.DONE && __jsx(Result, {\n      animation: formStates.DONE\n    }), isFormSubmited && submissionStatus === formStates.ERROR && __jsx(Result, {\n      animation: formStates.ERROR\n    })))))\n  );\n}; // eslint-disable-next-line react/prop-types\n\n\nconst FormCadastro = ({\n  props\n}) => __jsx(FormMessageWrapper, null, __jsx(Box, _extends({\n  boxShadow: \"3px 2px 5px rgba(7, 12, 14, 0.3)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  flex: 1,\n  padding: {\n    xs: '16px',\n    md: '30px'\n  },\n  borderRadius: \"1rem\",\n  margin: \"10rem 0 0\",\n  backgroundColor: \"white\" // eslint-disable-next-line react/jsx-props-no-spreading\n\n}, props), props && __jsx(props.CloseButton, null), __jsx(FormContent, null)));\n\nexport default FormCadastro;","map":null,"metadata":{},"sourceType":"module"}
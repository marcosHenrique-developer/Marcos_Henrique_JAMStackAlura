{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable object-curly-newline */\n\n/* eslint-disable implicit-arrow-linebreak */\n\n/* eslint-disable react/default-props-match-prop-types */\n\n/* eslint-disable react/require-default-props */\n\n/* eslint-disable react/jsx-filename-extension */\n\n/* eslint-disable indent */\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport get from 'lodash/get';\nimport { breakpointsMedia } from '../theme/utils/breakpointMedia';\nimport { propToStyle } from '../theme/utils/propStyle';\nimport { Links } from '../components/Links';\nconst paragraph1 = css`\n  font-size: ${({\n  theme\n}) => theme.typographyVariants.paragraph1.fontSize};\n  font-weight: ${({\n  theme\n}) => theme.typographyVariants.paragraph1.fontWeight};\n  line-height: ${({\n  theme\n}) => theme.typographyVariants.paragraph1.lineHeight};\n`;\nconst smallestException = css`\n  font-size: ${({\n  theme\n}) => theme.typographyVariants.smallestException.fontSize};\n  font-weight: ${({\n  theme\n}) => theme.typographyVariants.smallestException.fontWeight};\n  line-height: ${({\n  theme\n}) => theme.typographyVariants.smallestException.lineHeight};\n`;\nexport const TextStyleVariants = {\n  smallestException,\n  paragraph1,\n  title: css`\n    ${({\n    theme\n  }) => css`\n      font-size: ${theme.typographyVariants.titleXS.fontSize};\n      font-weight: ${theme.typographyVariants.titleXS.fontWeight};\n      line-height: ${theme.typographyVariants.titleXS.lineHeight};\n    `}\n    ${breakpointsMedia({\n    md: css`\n        ${({\n      theme\n    }) => css`\n          font-size: ${theme.typographyVariants.title.fontSize};\n          font-weight: ${theme.typographyVariants.title.fontWeight};\n          line-height: ${theme.typographyVariants.title.lineHeight};\n        `}\n      `\n  })}\n  `\n};\nconst TextBase = styled.span`\n  ${props => TextStyleVariants[props.variant]}\n  color: ${({\n  theme,\n  color\n}) => get(theme, `colors.${color}.color`)};\n  ${propToStyle('textAlign')}\n  ${propToStyle('marginBottom')}\n  ${propToStyle('margin')}\n`;\nexport default function Text(_ref) {\n  let {\n    tag,\n    href,\n    variant,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"tag\", \"href\", \"variant\", \"children\"]);\n\n  if (href) {\n    return __jsx(TextBase, _extends({\n      as: Links,\n      variant: variant,\n      href: href // eslint-disable-next-line react/jsx-props-no-spreading\n\n    }, props), children);\n  }\n\n  return __jsx(TextBase, _extends({\n    as: tag,\n    variant: variant // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, props), children);\n}\nText.defaultProps = {\n  tag: 'span',\n  variant: 'paragraph1',\n  children: null,\n  href: ''\n};","map":null,"metadata":{},"sourceType":"module"}
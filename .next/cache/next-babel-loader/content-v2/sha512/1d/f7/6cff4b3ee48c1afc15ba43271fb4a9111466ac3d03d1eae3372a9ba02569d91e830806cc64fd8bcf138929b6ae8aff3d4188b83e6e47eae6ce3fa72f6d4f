{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/Projetos/Projeto Jam-Stack/Project-portifolio/pages/sobre/[repos].js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PagesGit from '../../src/components/GitPages';\nimport websitePageHOC from '../../src/components/Hoc';\n\nfunction GitPages({\n  post\n}) {\n  return (// eslint-disable-next-line react/jsx-filename-extension\n    __jsx(PagesGit, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }\n    })\n  );\n}\n\nGitPages.propTypes = PagesGit.propTypes;\nexport default websitePageHOC(GitPages);\nexport async function getStaticProps({\n  params\n}) {\n  const faqCategories = await fetch('https://instalura-api.vercel.app/api/content/faq').then(async respostaDoServer => {\n    const resposta = await respostaDoServer.json();\n    return resposta.data;\n  });\n  const dadosDaPagina = faqCategories.reduce((valorAcumulado, faqCategory) => {\n    const foundQuestion = faqCategory.questions.find(question => {\n      if (question.slug === params.slug) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (foundQuestion) {\n      return _objectSpread(_objectSpread({}, valorAcumulado), {}, {\n        category: faqCategory,\n        question: foundQuestion\n      });\n    }\n\n    return valorAcumulado;\n  }, {});\n  return {\n    props: {\n      category: dadosDaPagina.category,\n      question: dadosDaPagina.question,\n      pageWrapperProps: {\n        seoProps: {\n          headTitle: dadosDaPagina.question.title\n        }\n      }\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const faqCategories = await fetch('https://instalura-api.vercel.app/api/content/faq').then(async respostaDoServer => {\n    const resposta = await respostaDoServer.json();\n    return resposta.data;\n  });\n  const paths = faqCategories.reduce((valorAcumulado, faqCategory) => {\n    const questionsPaths = faqCategory.questions.map(question => {\n      const questionSlug = question.slug;\n      return {\n        params: {\n          slug: questionSlug\n        }\n      };\n    });\n    return [...valorAcumulado, ...questionsPaths];\n  }, []);\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"sources":["/Users/apple/Downloads/Projetos/Projeto Jam-Stack/Project-portifolio/pages/sobre/[repos].js"],"names":["React","PagesGit","websitePageHOC","GitPages","post","propTypes","getStaticProps","params","faqCategories","fetch","then","respostaDoServer","resposta","json","data","dadosDaPagina","reduce","valorAcumulado","faqCategory","foundQuestion","questions","find","question","slug","category","props","pageWrapperProps","seoProps","headTitle","title","getStaticPaths","paths","questionsPaths","map","questionSlug","fallback"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA4B;AAC1B,SACE;AACA,UAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAID;;AAEDD,QAAQ,CAACE,SAAT,GAAqBJ,QAAQ,CAACI,SAA9B;AAEA,eAAeH,cAAc,CAACC,QAAD,CAA7B;AAEA,OAAO,eAAeG,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMC,aAAa,GAAG,MAAMC,KAAK,CAC/B,kDAD+B,CAAL,CAE1BC,IAF0B,CAErB,MAAOC,gBAAP,IAA4B;AACjC,UAAMC,QAAQ,GAAG,MAAMD,gBAAgB,CAACE,IAAjB,EAAvB;AACA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAL2B,CAA5B;AAOA,QAAMC,aAAa,GAAGP,aAAa,CAACQ,MAAd,CAAqB,CAACC,cAAD,EAAiBC,WAAjB,KAAiC;AAC1E,UAAMC,aAAa,GAAGD,WAAW,CAACE,SAAZ,CAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AAC7D,UAAIA,QAAQ,CAACC,IAAT,KAAkBhB,MAAM,CAACgB,IAA7B,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KALqB,CAAtB;;AAOA,QAAIJ,aAAJ,EAAmB;AACjB,6CACKF,cADL;AAEEO,QAAAA,QAAQ,EAAEN,WAFZ;AAGEI,QAAAA,QAAQ,EAAEH;AAHZ;AAKD;;AAED,WAAOF,cAAP;AACD,GAjBqB,EAiBnB,EAjBmB,CAAtB;AAmBA,SAAO;AACLQ,IAAAA,KAAK,EAAE;AACLD,MAAAA,QAAQ,EAAET,aAAa,CAACS,QADnB;AAELF,MAAAA,QAAQ,EAAEP,aAAa,CAACO,QAFnB;AAGLI,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,SAAS,EAAEb,aAAa,CAACO,QAAd,CAAuBO;AAD1B;AADM;AAHb;AADF,GAAP;AAWD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMtB,aAAa,GAAG,MAAMC,KAAK,CAC/B,kDAD+B,CAAL,CAE1BC,IAF0B,CAErB,MAAOC,gBAAP,IAA4B;AACjC,UAAMC,QAAQ,GAAG,MAAMD,gBAAgB,CAACE,IAAjB,EAAvB;AACA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAL2B,CAA5B;AAOA,QAAMiB,KAAK,GAAGvB,aAAa,CAACQ,MAAd,CAAqB,CAACC,cAAD,EAAiBC,WAAjB,KAAiC;AAClE,UAAMc,cAAc,GAAGd,WAAW,CAACE,SAAZ,CAAsBa,GAAtB,CAA2BX,QAAD,IAAc;AAC7D,YAAMY,YAAY,GAAGZ,QAAQ,CAACC,IAA9B;AACA,aAAO;AAAEhB,QAAAA,MAAM,EAAE;AAAEgB,UAAAA,IAAI,EAAEW;AAAR;AAAV,OAAP;AACD,KAHsB,CAAvB;AAKA,WAAO,CAAC,GAAGjB,cAAJ,EAAoB,GAAGe,cAAvB,CAAP;AACD,GAPa,EAOX,EAPW,CAAd;AASA,SAAO;AACLD,IAAAA,KADK;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID","sourcesContent":["import React from 'react';\nimport PagesGit from '../../src/components/GitPages';\nimport websitePageHOC from '../../src/components/Hoc';\n\nfunction GitPages({ post }) {\n  return (\n    // eslint-disable-next-line react/jsx-filename-extension\n    <PagesGit post={post} />\n  );\n}\n\nGitPages.propTypes = PagesGit.propTypes;\n\nexport default websitePageHOC(GitPages);\n\nexport async function getStaticProps({ params }) {\n  const faqCategories = await fetch(\n    'https://instalura-api.vercel.app/api/content/faq',\n  ).then(async (respostaDoServer) => {\n    const resposta = await respostaDoServer.json();\n    return resposta.data;\n  });\n\n  const dadosDaPagina = faqCategories.reduce((valorAcumulado, faqCategory) => {\n    const foundQuestion = faqCategory.questions.find((question) => {\n      if (question.slug === params.slug) {\n        return true;\n      }\n      return false;\n    });\n\n    if (foundQuestion) {\n      return {\n        ...valorAcumulado,\n        category: faqCategory,\n        question: foundQuestion,\n      };\n    }\n\n    return valorAcumulado;\n  }, {});\n\n  return {\n    props: {\n      category: dadosDaPagina.category,\n      question: dadosDaPagina.question,\n      pageWrapperProps: {\n        seoProps: {\n          headTitle: dadosDaPagina.question.title,\n        },\n      },\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const faqCategories = await fetch(\n    'https://instalura-api.vercel.app/api/content/faq',\n  ).then(async (respostaDoServer) => {\n    const resposta = await respostaDoServer.json();\n    return resposta.data;\n  });\n\n  const paths = faqCategories.reduce((valorAcumulado, faqCategory) => {\n    const questionsPaths = faqCategory.questions.map((question) => {\n      const questionSlug = question.slug;\n      return { params: { slug: questionSlug } };\n    });\n\n    return [...valorAcumulado, ...questionsPaths];\n  }, []);\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}